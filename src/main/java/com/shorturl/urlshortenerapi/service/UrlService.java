package com.shorturl.urlshortenerapi.service;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.shorturl.urlshortenerapi.dto.LongUrlDTO;
import com.shorturl.urlshortenerapi.dto.ShortUrlDTO;
import com.shorturl.urlshortenerapi.model.Url;
import com.shorturl.urlshortenerapi.model.UrlAdditional;
import com.shorturl.urlshortenerapi.repository.UrlAdditionalRepository;
import com.shorturl.urlshortenerapi.repository.UrlRepository;
import com.shorturl.urlshortenerapi.utils.ShorteningUtil;

import java.util.List;

@Service
public class UrlService {

    Logger logger = LoggerFactory.getLogger(UrlService.class);

    @Autowired
    private  UrlRepository urlRepository;
    
    @Autowired
    private  UrlAdditionalRepository urlAdditionalRepository;

    private Url get(Long id) {
        logger.info(String.format("Fetching Url from database for Id %d", id));
        Url urlEntity = urlRepository.findById(id).get();
        return urlEntity;
    }

    /**
     * Uses the Base62 encoded to convert to Base10 number and fetches the corresponding record from the database
     *
     * @param shortenString Base62 encoded string
     * @return FullUrl object
     */
    public LongUrlDTO getFullUrl(String shortenString) {
        logger.debug("Converting Base 62 string %s to Base 10 id");
        Long id = ShorteningUtil.strToId(shortenString);
        logger.info(String.format("Converted Base 62 string %s to Base 10 id %s", shortenString, id));

        logger.info(String.format("Retrieving full url for %d", id));
        return new LongUrlDTO(this.get(id).getLongUrl());
    }

    private Url save(LongUrlDTO fullUrl) {
    	Url url = new Url();
    	url.setLongUrl(fullUrl.getLongUrl());
        return urlRepository.save(url);
    }

    /**
     * It saves the full url to database and uses the autogenerated id to convert to Base62 string
     *
     * @param longUrl FullUrl object to be converted to shortened url
     * @return ShortUrl object
     */
    public ShortUrlDTO getShortUrl(LongUrlDTO longUrl) {

        logger.info("Checking if the url already exists");
        List<Url> savedUrls = null;
        savedUrls = checkFullUrlAlreadyExists(longUrl);

        Url savedUrl = null;

        if (savedUrls.isEmpty()) {
            logger.info(String.format("Saving Url %s to database", longUrl.getLongUrl()));
            savedUrl = this.save(longUrl);
            logger.debug(savedUrl.toString());
        }
        else {
            savedUrl = savedUrls.get(0);
            logger.info(String.format("url: %s already exists in the database. skipped insert", savedUrl));
        }

        logger.debug(String.format("Converting Base 10 %d to Base 62 string", savedUrl.getId()));
        String shortUrl = ShorteningUtil.idToStr(savedUrl.getId());
        logger.info(String.format("Converted Base 10 %d to Base 62 string %s", savedUrl.getId(), shortUrl));
        
        //saving all details to URL additional table
        urlAdditionalRepository.save(new UrlAdditional(savedUrl.getId(), longUrl.getLongUrl(), shortUrl, "USER" ));
        
        return new ShortUrlDTO(shortUrl);
    }

    /**
     * Check if Url already exists in the database to prevent having same url stored multiple times
     *
     * @param fullUrl
     * @return list of UrlEntity objects, list will be empty if no results found
     */
    private List<Url> checkFullUrlAlreadyExists(LongUrlDTO longUrl) {
        return urlRepository.findByLongUrl(longUrl.getLongUrl());
    }
}
